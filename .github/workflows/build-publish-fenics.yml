# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Create and publish a Docker image for sub-directory

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Name of release tag"
        default: "latest"
        type: string
      image_name:
         description: "Subdirectory of package"
         default: "fenics"
         type: string
      image_description:
         description: "Description of package"
         default: ""
         type: string
env:
  REGISTRY: ghcr.io

jobs:
  build-and-push-image:
    runs-on: ${{ matrix.runs-on }}
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        include:
          - arch: amd64
            runs-on: ubuntu-latest
          - arch: arm64
            runs-on: macos-14

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        if: ${{ startsWith(matrix.runs-on, 'ubuntu') }}
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        if: ${{ startsWith(matrix.runs-on, 'ubuntu') }}
        uses: docker/setup-buildx-action@v2
      
      - name: Set up Docker on mac
        if: ${{ startsWith(matrix.runs-on, 'mac') }}
        run: |
          brew install colima docker
          colima start --cpu 3 --memory 6 --disk 100 --mount-type=sshfs --dns=1.1.1.1

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.1.1
        with:
          labels: |
            org.opencontainers.image.title=${{ github.event.inputs.image_name }}
            org.opencontainers.image.description=${{ github.event.inputs.image_description }}

          images: ${{ github.GITHUB_REPOSITORY }}/${{ github.event.inputs.image_name }}
          tags: |
            type=raw,value=${{ github.event.inputs.release_tag }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: "{{defaultContext}}:${{ github.event.inputs.image_name }}"
          push: true
          platforms: linux/${{ matrix.arch }}
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ github.event.inputs.image_name }}:${{ github.event.inputs.release_tag }}-${{ matrix.arch }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ github.event.inputs.image_name }}:${{ github.event.inputs.release_tag }}
          cache-to: type=inline

  merge-multiarch-image:
    # merge arm and amd64 builds
    permissions:
      contents: read
      packages: write

    runs-on: ubuntu-latest
    needs:
      - build-and-push-image
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image variable
        run: |
          
          echo  "IMAGE=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ github.event.inputs.image_name }}:${{ github.event.inputs.release_tag }}" >> ${GITHUB_OUTPUT}
      
      - name: Merge and push updated manifest
        run: |
          docker manifest create --insecure "${IMAGE}" --amend "${IMAGE}-amd64" --amend "${IMAGE}-arm64"
          docker manifest push "${IMAGE}"
          
      # TODO: remove intermediate tags?

